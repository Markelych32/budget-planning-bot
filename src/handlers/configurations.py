from src.application.database import transaction
from src.application.messages import (
    CallbackMessages,
    CallbackQueryContract,
    MessageContract,
    Messages,
)
from src.domain.categories import CategoriesCRUD, CategoryInDB
from src.domain.configurations import (
    ConfigurationRootOption,
    ConfigurationsCRUD,
    ConfigurationUpdateOption,
)
from src.domain.configurations import services as configurations_services
from src.domain.money import CurrenciesCRUD, CurrencyInDB
from src.infrastructure.errors import UserError
from src.keyboards.default import default_keyboard
from src.keyboards.models import CallbackItem
from src.keyboards.patterns import callback_patterns_keyboard


@transaction
async def number_of_dates_selected_callback(contract: MessageContract):
    try:
        if not contract.m.text:
            raise ValueError
        number_of_dates = int(contract.m.text)
    except ValueError:
        raise UserError("‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —á–∏—Å–ª–æ–º")

    await ConfigurationsCRUD().update_number_of_dates(
        configuration_id=contract.user.configuration.id,
        payload=number_of_dates,
    )

    await Messages.send(
        chat_id=contract.user.chat_id,
        text="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
        keyboard=default_keyboard(),
    )

    contract.state.messages_to_delete.add(contract.m.id)
    await Messages.delete(
        contract.user.chat_id, *contract.state.messages_to_delete
    )


@transaction
async def costs_sources_selected_callback(contract: MessageContract):
    if not contract.m.text:
        raise UserError("‚ö†Ô∏è –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫")

    payload = configurations_services.clean_sources_input(contract.m.text)

    await ConfigurationsCRUD().update_costs_sources(
        configuration_id=contract.user.configuration.id, payload=payload
    )

    await Messages.send(
        chat_id=contract.user.chat_id,
        text="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
        keyboard=default_keyboard(),
    )

    contract.state.messages_to_delete.add(contract.m.id)
    await Messages.delete(
        contract.user.chat_id, *contract.state.messages_to_delete
    )


@transaction
async def incomes_sources_selected_callback(contract: MessageContract):
    if not contract.m.text:
        raise UserError("‚ö†Ô∏è –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫")

    payload = configurations_services.clean_sources_input(contract.m.text)

    await ConfigurationsCRUD().update_incomes_sources(
        configuration_id=contract.user.configuration.id, payload=payload
    )

    await Messages.send(
        chat_id=contract.user.chat_id,
        text="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
        keyboard=default_keyboard(),
    )

    contract.state.messages_to_delete.add(contract.m.id)
    await Messages.delete(
        contract.user.chat_id, *contract.state.messages_to_delete
    )


@transaction
async def ignore_categories_entered_callback(contract: MessageContract):
    if not contract.m.text:
        raise UserError("‚ö†Ô∏è –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

    payload = await configurations_services.clean_ignore_categories(
        contract.m.text
    )

    await ConfigurationsCRUD().update_ignore_categories(
        configuration_id=contract.user.configuration.id, payload=payload
    )

    await Messages.send(
        chat_id=contract.user.chat_id,
        text="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
        keyboard=default_keyboard(),
    )

    contract.state.messages_to_delete.add(contract.m.id)
    await Messages.delete(
        contract.user.chat_id, *contract.state.messages_to_delete
    )


@transaction
async def default_currency_selected_callback(contract: CallbackQueryContract):
    currency_id: int = int(
        contract.q.data.replace(ConfigurationUpdateOption.SELECT_CURRENCY, "")
    )
    currency: CurrencyInDB = await CurrenciesCRUD().get(currency_id)
    await ConfigurationsCRUD().update_default_currency(
        contract.user.configuration.id, currency.id
    )

    await Messages.send(
        chat_id=contract.user.chat_id,
        text="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
        keyboard=default_keyboard(),
    )

    await Messages.delete(
        contract.user.chat_id, *contract.state.messages_to_delete
    )


async def update_submenu_option_selected_callback(
    contract: CallbackQueryContract,
):
    state = contract.state
    state.messages_to_delete.add(contract.q.message.id)

    match contract.q.data:
        case ConfigurationUpdateOption.NUMBER_OF_DATES:
            await CallbackMessages.edit(
                q=contract.q,
                text="‚§µÔ∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter",
                keyboard=None,
            )
            state.next_callback = number_of_dates_selected_callback
        case ConfigurationUpdateOption.COSTS_SOURCES:
            text = (
                "‚§µÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter\n"
                "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –í–∫—É—Å–Ω–æ - –∏ —Ç–æ—á–∫–∞, –í–æ–¥–∞, –®–æ–∫–æ–ª–∞–¥–Ω—ã–µ –∫–æ–Ω—Ñ–µ—Ç—ã</i>"
            )
            await CallbackMessages.edit(q=contract.q, text=text, keyboard=None)
            state.next_callback = costs_sources_selected_callback
        case ConfigurationUpdateOption.INCOMES_SOURCES:
            text = (
                "‚§µÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–æ–≤ –∏ –Ω–∞–∂–º–∏—Ç–µ Enter\n"
                "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—è –ª—é–±–∏–º–∞—è —Ä–∞–±–æ—Ç–∞, –ª–æ—Ç–µ—Ä–µ—è</i>"
            )
            await CallbackMessages.edit(q=contract.q, text=text, keyboard=None)
            state.next_callback = incomes_sources_selected_callback
        case ConfigurationUpdateOption.IGNORE_CATEGORIES:
            categories: list[CategoryInDB] = await CategoriesCRUD().all()
            categories_text = "\n".join(
                (
                    (f"{category.id} üëâ {category.name}")
                    for category in categories
                )
            )

            text = (
                "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏:\n"
                f"{categories_text}"
                "\n\n‚§µÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è <b>—É–¥–∞–ª–µ–Ω–∏—è</b> —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é."
                "\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 1,2,3,5,19</i>"
            )
            await CallbackMessages.edit(q=contract.q, text=text, keyboard=None)
            state.next_callback = ignore_categories_entered_callback
        case ConfigurationUpdateOption.DEFAULT_CURRENCY:
            currencies: list[CurrencyInDB] = await CurrenciesCRUD().all()

            keyboard_patterns = [
                CallbackItem(
                    name=f"{currency.name} {currency.sign}",
                    callback_data=(
                        f"{ConfigurationUpdateOption.SELECT_CURRENCY}{currency.id}"
                    ),
                )
                for currency in currencies
            ]
            await CallbackMessages.edit(
                q=contract.q,
                text="ü§î –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                keyboard=callback_patterns_keyboard(keyboard_patterns),
            )
            state.next_callback = default_currency_selected_callback
        case _:
            raise Exception


async def configuration_submenu_option_selected_callback(
    contract: CallbackQueryContract,
):
    state = contract.state

    match contract.q.data:
        case ConfigurationRootOption.GET_ALL:
            await CallbackMessages.edit(
                q=contract.q, text=contract.user.configuration.represent()
            )
            await Messages.delete(
                contract.user.chat_id, *state.messages_to_delete
            )
        case ConfigurationRootOption.UPDATE:
            state.next_callback = update_submenu_option_selected_callback
            state.messages_to_delete.add(contract.q.id)
            await CallbackMessages.edit(
                q=contract.q,
                text="ü§î –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑–º–µ–Ω–∏—Ç—å",
                keyboard=callback_patterns_keyboard(
                    [
                        CallbackItem(
                            name=" üé® –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤",
                            callback_data=ConfigurationUpdateOption.COSTS_SOURCES,
                        ),
                        CallbackItem(
                            name="üé® –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–æ–≤",
                            callback_data=ConfigurationUpdateOption.INCOMES_SOURCES,
                        ),
                        CallbackItem(
                            name="üëÆ‚Äç‚ôÇÔ∏è –ò—Å–∫–ª—é—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                            callback_data=ConfigurationUpdateOption.IGNORE_CATEGORIES,
                        ),
                        CallbackItem(
                            name="üî¢ –ö–æ–ª-–≤–æ –¥–Ω–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞",
                            callback_data=ConfigurationUpdateOption.NUMBER_OF_DATES,
                        ),
                        CallbackItem(
                            name="üí± –í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                            callback_data=ConfigurationUpdateOption.DEFAULT_CURRENCY,
                        ),
                    ],
                    width=1,
                ),
            )
        case _:
            raise Exception


async def configurations_general_callback(contract: MessageContract):
    contract.state.clear_data()

    await Messages.send(
        chat_id=contract.user.chat_id,
        text="ü§î –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –æ–ø—Ü–∏—é",
        keyboard=callback_patterns_keyboard(
            [
                CallbackItem(
                    name="‚ôªÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å",
                    callback_data=ConfigurationRootOption.UPDATE,
                ),
                CallbackItem(
                    name="üî¶ –ü–æ–∫–∞–∑–∞—Ç—å",
                    callback_data=ConfigurationRootOption.GET_ALL,
                ),
            ]
        ),
    )

    contract.state.next_callback = (
        configuration_submenu_option_selected_callback
    )
    contract.state.messages_to_delete.add(contract.m.id)
